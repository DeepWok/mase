MASE_TYPES = [
    "module",
    "module_related_func",
    "builtin_func",
    "implicit_func",
    "placeholder",
    "get_attr",
    "output",
]


MASE_IMPLICIT_FUNCS = [
    # possibly are just constants
    "size",
    "view",
    # Memory ops and tensor reshapes
    "to",
    "bool",
    "flatten",
    "squeeze",
    "unsqueeze",
    "transpose",
    "permute",
    "reshape",
    "contiguous",
    "dropout",
    "eq",
    "ne",
    "gemm",
    "ge",
    "where",
    "_assert",
    "getattr",
    "long",
    "type_as",
    "clamp",
    "abs",
    "stack",
    "cast",
    "shape",
    "gather",
    "slice",
    "cat",
    "split",
    "tile",
    "expand",
    "full",
    "ones",
    "dim",
    "finfo",
    "masked_fill",
    "masked_fill_",
]

MASE_MODULE_RELATED_FUNCS = [
    "adaptive_avg_pool1d",
    "adaptive_avg_pool2d",
    "adaptive_max_pool1d",
    "adaptive_max_pool2d",
    "avg_pool1d",
    "avg_pool2d",
    "batch_norm",
    "conv1d",
    "conv2d",
    "layer_norm",
    "linear",
    "max_pool1d",
    "max_pool2d",
    "relu",
    "identity",
    "hardshrink",
    "silu",
    "elu",
    "sigmoid",
    "softshrink",
    "logsigmoid",
    "softmax",
    "selu",
    "tanh",
    "gelu",
    "softplus",
    "softsign",
]

MASE_MODULES = [
    "batch_norm1d",
    "batch_norm2d",
]

MASE_BUILTIN_FUNCS = [
    "mul",
    "baddbmm",
    "addmm",
    "sub",
    "add",
    "matmul",
    "bmm",
    "mean",
    "pow",
    "sqrt",
    "div",
    "softmax",
    "max",
    "cumsum",
    "erf",
    "sin",
    "cos",
    "tan",
    "sinh",
    "cosh",
    "tanh",
    "greater",
    "gt",
    "less",
    "le",  # less or equal
    "lt",
    "sigmoid",
    "not",
    "min",
    "neg",
    "log",
    "arange",
    "range",
    "gelu",
    "scaled_dot_product_attention",
    "embedding",
    "df_split",
    "getitem",
]

MASE_TYPE_MAP = {
    **{t: {"type": "module"} for t in MASE_MODULES},
    **{t: {"type": "module_related_func"} for t in MASE_MODULE_RELATED_FUNCS},
    **{t: {"type": "builtin_func"} for t in MASE_BUILTIN_FUNCS},
    **{t: {"type": "implicit_func"} for t in MASE_IMPLICIT_FUNCS},
    **{"placeholder": {"type": "placeholder"}},
    **{"get_attr": {"type": "get_attr"}},
    **{"output": {"type": "output"}},
}

MASE_HARDWARE_TOOLCHAIN = [
    "INTERNAL_RTL",
    "EXTERNAL_RTL",
    "INTERNAL_HLS",
    "EXTERNAL_HLS",
    "MLIR_HLS",
]
