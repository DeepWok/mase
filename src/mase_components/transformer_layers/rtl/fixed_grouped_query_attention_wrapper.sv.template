`timescale 1ns / 1ps

module fixed_grouped_query_attention_wrapper #(
    parameter  NUM_HEADS = <!NUM_HEADS>,
    parameter  NUM_GROUPS = <!NUM_GROUPS>,
    parameter  DATA_IN_0_TENSOR_SIZE_DIM_0 = <!DATA_IN_0_TENSOR_SIZE_DIM_0>,
    parameter  DATA_IN_0_TENSOR_SIZE_DIM_1 = <!DATA_IN_0_TENSOR_SIZE_DIM_1>,
    parameter  DATA_IN_0_PARALLELISM_DIM_0 = <!DATA_IN_0_PARALLELISM_DIM_0>,
    parameter  DATA_IN_0_PARALLELISM_DIM_1 = <!DATA_IN_0_PARALLELISM_DIM_1>,
    parameter  DATA_IN_0_PRECISION_0 = <!DATA_IN_0_PRECISION_0>,
    parameter  DATA_IN_0_PRECISION_1 = <!DATA_IN_0_PRECISION_1>,
    parameter  WEIGHTS_PRE_TRANSPOSED = <!WEIGHTS_PRE_TRANSPOSED>,
    parameter  WEIGHT_TENSOR_SIZE_DIM_0 = <!WEIGHT_TENSOR_SIZE_DIM_0>,
    parameter  WEIGHT_TENSOR_SIZE_DIM_1 = <!WEIGHT_TENSOR_SIZE_DIM_1>,
    parameter  WEIGHT_PARALLELISM_DIM_0 = <!WEIGHT_PARALLELISM_DIM_0>,
    parameter  WEIGHT_PARALLELISM_DIM_1 = <!WEIGHT_PARALLELISM_DIM_1>,
    parameter  WEIGHT_PRECISION_0 = <!WEIGHT_PRECISION_0>,
    parameter  WEIGHT_PRECISION_1 = <!WEIGHT_PRECISION_1>,

    localparam GROUP_SIZE = NUM_HEADS / NUM_GROUPS,
    // Shared weights params
    localparam GROUPED_WEIGHT_TENSOR_SIZE_DIM_0 = WEIGHT_TENSOR_SIZE_DIM_0 / GROUP_SIZE,
    localparam GROUPED_WEIGHT_TENSOR_SIZE_DIM_1 = WEIGHT_TENSOR_SIZE_DIM_1,
    // Assumption: shared weights have same parallelism
    localparam GROUPED_WEIGHT_PARALLELISM_DIM_0 = WEIGHT_PARALLELISM_DIM_0,
    localparam GROUPED_WEIGHT_PARALLELISM_DIM_1 = WEIGHT_PARALLELISM_DIM_1,
    // Assumption: shared weights have same fixed point format
    localparam GROUPED_WEIGHT_PRECISION_0 = WEIGHT_PRECISION_0,
    localparam GROUPED_WEIGHT_PRECISION_1 = WEIGHT_PRECISION_1,

    localparam GROUP_DEPTH_DIM_0 = GROUPED_WEIGHT_TENSOR_SIZE_DIM_0 / GROUPED_WEIGHT_PARALLELISM_DIM_0,
    localparam GROUP_DEPTH_DIM_1 = GROUPED_WEIGHT_TENSOR_SIZE_DIM_1 / GROUPED_WEIGHT_PARALLELISM_DIM_1,
    localparam GROUP_NUM_ITERS = GROUP_DEPTH_DIM_0 * GROUP_DEPTH_DIM_1,

    parameter  HAS_BIAS = 0,
    parameter  BIAS_TENSOR_SIZE_DIM_0 = 64,
    parameter  BIAS_TENSOR_SIZE_DIM_1 = 20,
    parameter  BIAS_PARALLELISM_DIM_0 = 4,
    parameter  BIAS_PARALLELISM_DIM_1 = 4,
    parameter  BIAS_PRECISION_0 = 16,
    parameter  BIAS_PRECISION_1 = 3,

    localparam DATA_OUT_0_TENSOR_SIZE_DIM_0 = WEIGHT_TENSOR_SIZE_DIM_0,
    localparam DATA_OUT_0_TENSOR_SIZE_DIM_1 = DATA_IN_0_TENSOR_SIZE_DIM_1,
    localparam DATA_OUT_0_PARALLELISM_DIM_0 = WEIGHT_PARALLELISM_DIM_0,
    localparam DATA_OUT_0_PARALLELISM_DIM_1 = DATA_IN_0_PARALLELISM_DIM_1,
    localparam DATA_OUT_0_PRECISION_0 = DATA_IN_0_PRECISION_0,
    localparam DATA_OUT_0_PRECISION_1 = DATA_IN_0_PRECISION_1
) (
    input logic clk,
    input logic rst,

    input logic [DATA_IN_0_PRECISION_0-1:0] data_in_0 [DATA_IN_0_PARALLELISM_DIM_0*DATA_IN_0_PARALLELISM_DIM_1-1:0],
    input logic data_in_0_valid,
    output logic data_in_0_ready,

    // Query weights
    input logic [WEIGHT_PRECISION_0-1:0] weight_query [WEIGHT_PARALLELISM_DIM_0 * WEIGHT_PARALLELISM_DIM_1-1:0],
    input logic weight_query_valid,
    output logic weight_query_ready,

    // Query bias
    input logic [BIAS_PRECISION_0-1:0] bias_query [BIAS_PARALLELISM_DIM_0 * BIAS_PARALLELISM_DIM_1 -1:0],
    input logic bias_query_valid,
    output logic bias_query_ready,

    // Key weights
    input logic [WEIGHT_PRECISION_0-1:0] weight_key [WEIGHT_PARALLELISM_DIM_0 * WEIGHT_PARALLELISM_DIM_1-1:0],
    input logic weight_key_valid,
    output logic weight_key_ready,

    // Key bias
    input logic [BIAS_PRECISION_0-1:0] bias_key [BIAS_PARALLELISM_DIM_0 * BIAS_PARALLELISM_DIM_1 -1:0],
    input logic bias_key_valid,
    output logic bias_key_ready,

    // Value weights
    input logic [WEIGHT_PRECISION_0-1:0] weight_value [WEIGHT_PARALLELISM_DIM_0 * WEIGHT_PARALLELISM_DIM_1-1:0],
    input logic weight_value_valid,
    output logic weight_value_ready,

    // Value bias
    input logic [BIAS_PRECISION_0-1:0] bias_value [BIAS_PARALLELISM_DIM_0 * BIAS_PARALLELISM_DIM_1 -1:0],
    input logic bias_value_valid,
    output logic bias_value_ready,

    // output weights
    input logic [WEIGHT_PRECISION_0-1:0] weight_output [WEIGHT_PARALLELISM_DIM_0 * WEIGHT_PARALLELISM_DIM_1-1:0],
    input logic weight_output_valid,
    output logic weight_output_ready,

    // output bias
    input logic [BIAS_PRECISION_0-1:0] bias_output [BIAS_PARALLELISM_DIM_0 * BIAS_PARALLELISM_DIM_1 -1:0],
    input logic bias_output_valid,
    output logic bias_output_ready,

    output logic [DATA_OUT_0_PRECISION_0-1:0] data_out_0 [DATA_OUT_0_PARALLELISM_DIM_0*DATA_OUT_0_PARALLELISM_DIM_1-1:0],
    output logic data_out_0_valid,
    input logic data_out_0_ready
);

fixed_grouped_query_attention #(
    .NUM_HEADS                    (NUM_HEADS),
    .NUM_GROUPS                   (NUM_GROUPS),
    .DATA_IN_0_TENSOR_SIZE_DIM_0  (DATA_IN_0_TENSOR_SIZE_DIM_0),
    .DATA_IN_0_TENSOR_SIZE_DIM_1  (DATA_IN_0_TENSOR_SIZE_DIM_1),
    .DATA_IN_0_PARALLELISM_DIM_0  (DATA_IN_0_PARALLELISM_DIM_0),
    .DATA_IN_0_PARALLELISM_DIM_1  (DATA_IN_0_PARALLELISM_DIM_1),
    .DATA_IN_0_PRECISION_0        (DATA_IN_0_PRECISION_0),
    .DATA_IN_0_PRECISION_1        (DATA_IN_0_PRECISION_1),
    .WEIGHTS_PRE_TRANSPOSED       (WEIGHTS_PRE_TRANSPOSED),
    .WEIGHT_TENSOR_SIZE_DIM_0     (WEIGHT_TENSOR_SIZE_DIM_0),
    .WEIGHT_TENSOR_SIZE_DIM_1     (WEIGHT_TENSOR_SIZE_DIM_1),
    .WEIGHT_PARALLELISM_DIM_0     (WEIGHT_PARALLELISM_DIM_0),
    .WEIGHT_PARALLELISM_DIM_1     (WEIGHT_PARALLELISM_DIM_1),
    .WEIGHT_PRECISION_0           (WEIGHT_PRECISION_0),
    .WEIGHT_PRECISION_1           (WEIGHT_PRECISION_1)
) dut_inst (
    .clk                          (clk),
    .rst                          (rst),

    .data_in_0                    (data_in_0),
    .data_in_0_valid              (data_in_0_valid),
    .data_in_0_ready              (data_in_0_ready),

    .weight_query                 (weight_query),
    .weight_query_valid           (weight_query_valid),
    .weight_query_ready           (weight_query_ready),
    .bias_query                   (bias_query),
    .bias_query_valid             (bias_query_valid),
    .bias_query_ready             (bias_query_ready),

    .weight_key                   (weight_key),
    .weight_key_valid             (weight_key_valid),
    .weight_key_ready             (weight_key_ready),
    .bias_key                     (bias_key),
    .bias_key_valid               (bias_key_valid),
    .bias_key_ready               (bias_key_ready),

    .weight_value                 (weight_value),
    .weight_value_valid           (weight_value_valid),
    .weight_value_ready           (weight_value_ready),
    .bias_value                   (bias_value),
    .bias_value_valid             (bias_value_valid),
    .bias_value_ready             (bias_value_ready),

    .weight_output                (weight_output),
    .weight_output_valid          (weight_output_valid),
    .weight_output_ready          (weight_output_ready),
    .bias_output                  (bias_output),
    .bias_output_valid            (bias_output_valid),
    .bias_output_ready            (bias_output_ready),

    .data_out_0                   (data_out_0),
    .data_out_0_valid             (data_out_0_valid),
    .data_out_0_ready             (data_out_0_ready)
);

endmodule
