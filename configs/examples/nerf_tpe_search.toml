# basics
model = "nerfvision"
dataset = "nerf-lego"

max_epochs = 5
batch_size = 128
learning_rate = 1e-2
accelerator = "gpu"
project = "nerf_lego_quantizations"
seed = 42

[search.search_space]
name = "graph/quantize/mixed_precision_ptq"

[search.search_space.setup]
by = "name"

[search.search_space.seed.mxint.config]
name = ['mxint']

data_in_width = [4, 8]
data_in_exponent_width = [3, 4, 5, 6, 7, 8, 9]
data_in_block_size = [3, 4, 5, 6, 7, 8, 9]

weight_width = [2, 4, 8]
weight_exponent_width = [3, 4, 5, 6, 7, 8, 9]
weight_block_size = [3, 4, 5, 6, 7, 8, 9]

bias_width = [2, 4, 8]
bias_exponent_width = [3, 4, 5, 6, 7, 8, 9]
bias_block_size = [3, 4, 5, 6, 7, 8, 9]


[search.search_space.seed.integer.config]
name = ["integer"]

data_in_width = [4, 8]
data_in_frac_width = [3, 4, 5, 6, 7, 8, 9]

weight_width = [2, 4, 8]
weight_frac_width = [3, 4, 5, 6, 7, 8, 9]

bias_width = [2, 4, 8]
bias_frac_width = [3, 4, 5, 6, 7, 8, 9]


[search.search_space.seed.log.config]
name = ["log"]

data_in_width = [4, 8]
data_in_exponent_bias = [3, 4, 5, 6, 7, 8, 9]

weight_width = [2, 4, 8]
weight_exponent_bias = [3, 4, 5, 6, 7, 8, 9]

bias_width = [2, 4, 8]
bias_exponent_bias = [3, 4, 5, 6, 7, 8, 9]


[search.search_space.seed.minifloat_denorm.config]
name = ["minifloat_denorm"]

data_in_width = [4, 8]
data_in_exponent_width = [3, 4, 5, 6, 7, 8, 9]
data_in_exponent_bias = [3, 4, 5, 6, 7, 8, 9]

weight_width = [2, 4, 8]
weight_exponent_width = [3, 4, 5, 6, 7, 8, 9]
weight_exponent_bias = [3, 4, 5, 6, 7, 8, 9]

bias_width = [2, 4, 8]
bias_exponent_width = [3, 4, 5, 6, 7, 8, 9]
bias_exponent_bias = [3, 4, 5, 6, 7, 8, 9]


[search.search_space.seed.minifloat_ieee.config]
name = ["minifloat_ieee"]

data_in_width = [4, 8]
data_in_exponent_width = [3, 4, 5, 6, 7, 8, 9]
data_in_exponent_bias = [3, 4, 5, 6, 7, 8, 9]

weight_width = [2, 4, 8]
weight_exponent_width = [3, 4, 5, 6, 7, 8, 9]
weight_exponent_bias = [3, 4, 5, 6, 7, 8, 9]

bias_width = [2, 4, 8]
bias_exponent_width = [3, 4, 5, 6, 7, 8, 9]
bias_exponent_bias = [3, 4, 5, 6, 7, 8, 9]


[search.search_space.seed.block_fp.config]
name = ["block_fp"]

data_in_width = [4, 8]
data_in_exponent_width = [3, 4, 5, 6, 7, 8, 9]
data_in_exponent_bias = [3, 4, 5, 6, 7, 8, 9]
data_in_block_size = [3, 4, 5, 6, 7, 8, 9]

weight_width = [2, 4, 8]
weight_exponent_width = [3, 4, 5, 6, 7, 8, 9]
weight_exponent_bias = [3, 4, 5, 6, 7, 8, 9]
weight_block_size = [3, 4, 5, 6, 7, 8, 9]

bias_width = [2, 4, 8]
bias_exponent_width = [3, 4, 5, 6, 7, 8, 9]
bias_exponent_bias = [3, 4, 5, 6, 7, 8, 9]
bias_block_size = [3, 4, 5, 6, 7, 8, 9]


[search.search_space.seed.binary.config]
name = ["binary"]

data_in_width = [4, 8]
data_in_stochastic = [3, 4, 5, 6, 7, 8, 9]
data_in_bipolar = [3, 4, 5, 6, 7, 8, 9]

weight_width = [2, 4, 8]
weight_stochastic = [3, 4, 5, 6, 7, 8, 9]
weight_bipolar = [3, 4, 5, 6, 7, 8, 9]

bias_width = [2, 4, 8]
bias_stochastic = [3, 4, 5, 6, 7, 8, 9]
bias_bipolar = [3, 4, 5, 6, 7, 8, 9]


[search.strategy]
name = "optuna"
eval_mode = true

[search.strategy.sw_runner.basic_evaluation]
data_loader = "val_dataloader"
num_samples = 256

[search.strategy.hw_runner.average_bitwidth]
compare_to = 32  # compare to FP32

[search.strategy.setup]
n_jobs = 1
n_trials = 20
timeout = 20000
sampler = "tpe"
# sum_scaled_metrics = true # single objective
# direction = "maximize"
sum_scaled_metrics = false # multi objective

[search.strategy.metrics]
loss.scale = 1.0
loss.direction = "minimize"
psnr.scale = 1.0
psnr.direction = "maximize"
average_bitwidth.scale = 0.2
average_bitwidth.direction = "minimize"
