# basics
model = "vgg_tiny"
dataset = "cifar10_subset"
task = "cls"
project = "vgg_tiny"
seed = 42
load_name = "TinyVGG-epoch=32-val_acc=0.67.ckpt"
load_type = "pl"
 
[passes.quantize]
by = "type"
[passes.quantize.default.config]
name = "NA"
[passes.quantize.linear.config]
name = "integer"
"data_in_width" = 8
"data_in_frac_width" = 4
"weight_width" = 8
"weight_frac_width" = 4
"bias_width" = 8
"bias_frac_width" = 4
 
[passes.quantize.conv2d.config]
name = "integer"
"data_in_width" = 8
"data_in_frac_width" = 4
"weight_width" = 8
"weight_frac_width" = 4
"bias_width" = 8
"bias_frac_width" = 4
 
[passes.quantize.batch_norm2d.config]
name = "integer"
"data_in_width" = 8
"data_in_frac_width" = 4
"weight_width" = 8
"weight_frac_width" = 4
"bias_width" = 8
"bias_frac_width" = 4
 
[search.search_space]
name = "graph/quantize/mixed_precision_ptq"
 
[search.search_space.setup]
by = "name"
 
[search.search_space.seed.default.config]
name = ["integer"]
data_in_width = [2, 4, 8, 10]
data_in_frac_width = [2, 4, 6]
weight_width = [2, 4, 8, 10]
weight_frac_width = [2, 4, 6]
bias_width = [2, 4, 8, 10]
bias_frac_width = [2, 4, 6]
#name = ["NA"]

[search.search_space.seed.linear.config]
# if search.search_space.setup.by = "type", this seed will be used to quantize all torch.nn.Linear/ F.linear
name = ["integer"]
data_in_width = [6, 8, 10, 12]
data_in_frac_width = ["NA"] # "NA" means data_in_frac_width = data_in_width // 2
weight_width = [6, 8, 10, 12]
weight_frac_width = ["NA"]
bias_width = [6, 8, 10, 12]
bias_frac_width = ["NA"]

[search.search_space.seed.conv2d.config]
name = ["integer"]
data_in_width = [6, 8, 10, 12]
data_in_frac_width = ["NA"] # "NA" means data_in_frac_width = data_in_width // 2
weight_width = [6, 8, 10, 12]
weight_frac_width = ["NA"]
bias_width = [6, 8, 10, 12]
bias_frac_width = ["NA"]

[search.strategy]
name = "rl"
algorithm = 'ppo'
env = 'mixed_precision'
device = 'cuda'
total_timesteps = 100000
n_steps = 32
n_envs = 4
eval_freq = 200
save_freq = 200
episode_max_len = 10
learning_rate = 2.5e-4
save_name = 'tmp_rl'

[search.strategy.setup]
# sum_scaled_metrics = true # single objective
# direction = "maximize"
sum_scaled_metrics = false # multi objective

[search.strategy.sw_runner.basic_evaluation]
data_loader = "val_dataloader"
num_samples = 512

[search.strategy.hw_runner.average_bitwidth]
compare_to = 32 # compare to FP32

[search.strategy.metrics]
# loss.scale = 1.0
# loss.direction = "minimize"
accuracy.scale = 1.0
accuracy.direction = "maximize"
# memory_density.scale = 0.2
# memory_density.direction = "minimize"
average_bitwidth.scale = 0.2
average_bitwidth.direction = "minimize"